name: MSBuild

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  SOLUTION_FILE_PATH: .
  BUILD_CONFIGURATION: Release

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Install vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.sh
      
      - name: Install dependencies with vcpkg
        run: ./vcpkg/vcpkg install nlohmann-json curl

      - name: Integrate vcpkg with MSBuild
        run: |
          ./vcpkg/vcpkg integrate install

      - name: Restore NuGet packages
        run: nuget restore ${{ env.SOLUTION_FILE_PATH }}

      - name: Build
        run: msbuild /m /p:Configuration=${{ env.BUILD_CONFIGURATION }} ${{ env.SOLUTION_FILE_PATH }}

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: x64/Release/

  release:
    needs: build
    runs-on: windows-latest
    
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: x64/Release/
        
      - name: Extract version from commit message
        id: get_version
        run: |
          $VERSION = (git log -1 --pretty=%B) -match "\b\d+\.\d+\.\d+\b" | Out-Null
          if ($matches) {
            echo "VERSION=$($matches[0])" >> $env:GITHUB_ENV
          }
        shell: pwsh
      - name: Skip release if no version found
        if: env.VERSION == ''  
        run: echo "No version found, skipping release."
        continue-on-error: true         
  
      - name: Create ZIP Archive
        if: env.VERSION != ''
        run: Compress-Archive -Path x64/Release/* -DestinationPath x64/build-output.zip
        shell: pwsh
  
      - name: Create GitHub Release
        if: env.VERSION != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false
          files: x64/build-output.zip
